name: release-go

on:
  workflow_call:
    inputs:
      go-version:
        required: false
        type: string
        default: "1.20"
      bin-path:
        required: false
        type: string
        default: "."
      output:
        required: false
        type: string
        default: "output"
      command:
        required: true
        type: string
      build-option:
        required: false
        type: string
        default: ""

permissions:
  contents: write
  packages: write

jobs:
  version:
    name: Get the version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.tag.outputs.version }}
    steps:
      - name: Get the version
        id: tag
        run: echo "version=$(echo $GITHUB_REF | cut -d / -f 3)" >> $GITHUB_OUTPUT
      - name: Echo tag
        run: echo ${{ steps.tag.outputs.version }}

  build:
    env:
      SUFFIX: ${{ matrix.goos == 'windows' && '.exe' || '' }}
      FLAGS: ${{ inputs.build-option }}
      VERSION: ${{ needs.version.outputs.version }}
    runs-on: ubuntu-latest
    needs: version
    strategy:
      matrix:
        # build and publish in parallel: linux/386, linux/amd64, linux/arm64, windows/386, windows/amd64, darwin/amd64, darwin/arm64
        goos: [linux, windows, darwin]
        goarch: ["386", amd64, arm64]
        exclude:
          - goarch: "386"
            goos: darwin
          - goarch: arm64
            goos: windows
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Build target name
        id: target-name
        run: echo "target=${{inputs.command}}-${{matrix.goos}}-${{matrix.goarch}}${SUFFIX}" >> $GITHUB_OUTPUT
      - name: Install dependencies
        run: go get .
      - name: Build
        run: mkdir -p ${{ inputs.output }} && GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build ${{env.FLAGS}} -o ${{inputs.output}}/${{env.TARGET}} ${{inputs.bin-path}} && tree ${{inputs.output}}
        env:
          TARGET: ${{steps.target-name.outputs.target}}
      - name: Upload Go build result
        uses: actions/upload-artifact@v4
        env:
          TARGET: ${{steps.target-name.outputs.target}}
        with:
          name: ${{env.TARGET}}
          path: ${{inputs.output}}/


  release:
    needs: [version, build]
    runs-on: ubuntu-latest
    env:
      VERSION: ${{ needs.version.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Fetch tags
        run: git fetch --tags --force
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ inputs.go-version }}
      - name: Download bin files
        uses: actions/download-artifact@v4
      - name: Create release
        run: |
          GIT_TAG_TITLE=$(git tag -l --format='%(contents:subject)' ${{env.VERSION}} 2>/dev/null)
          GIT_TAG_NOTE=$(git tag -l --format='%(contents:body)' ${{env.VERSION}} 2>/dev/null)
          echo "GIT_TAG_TITLE=$GIT_TAG_TITLE"
          echo "GIT_TAG_NOTE=$GIT_TAG_NOTE"
          gh release create "${{env.VERSION}}" --verify-tag -t "$GIT_TAG_TITLE" -n "$GIT_TAG_NOTE" ${{ inputs.output }}/*
        env:
          GH_TOKEN: ${{ github.token }}
